#!/usr/bin/env ruby
require "optparse"
require 'rubygems'
require 'puma/cli'
require "yaml"
require "erb"

HERE = File.expand_path(File.dirname(__FILE__))

module Kibana
  def self.global_settings
    @settings ||= {}
  end
end

# Defaults for the options
options = {
  :config => ENV["CONFIG_PATH"] || File.expand_path("#{HERE}/../config/kibana.yml"),
  :plugins_folder => ENV["PLUGINS_FOLDER"]
}

# Create a new parser
parser = OptionParser.new do |opts|
  opts.on('-e', '--elasticsearch URI', 'Elasticsearch instance') do |arg|
    options[:elasticsearch] = arg
  end
  opts.on('-c', '--config PATH', 'Path to config file') do |arg|
    options[:config] = arg
  end
  opts.on('-p', '--port PORT', 'Kibana port') do |arg|
    options[:port] = arg
  end
  opts.on('-q', '--quiet', 'Turns off logging') do |arg|
    options[:quiet] = arg
  end
  opts.on('-H', '--host HOST', 'Kibana host') do |arg|
    options[:host] = arg
  end
  opts.on('-v', '--version', 'Display version') do |arg|
    puts ENV['KIBANA_VERSION'] || 'dev-build'
    exit
  end
  opts.on('--plugins', 'Path to the folder to scan for plugins') do |arg|
    options[:plugins_folder] = arg
  end
  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end

# Set the usage banner
parser.banner = "Usage: kibana <options>\n\n"

# Parse the command line arguments
parser.parse! ARGV

# Load the config from default
template = ERB.new IO.read(options[:config])
config = YAML.load template.result(binding)

# Set the override for the port
port = (options[:port] || config['port'])

# Set the override for the host
host = (options[:host] || config['host'])

# Set the override for Elasticsaerch
elasticsearch = (options[:elasticsearch] || config['elasticsearch'])

# If the env isn't set we need to set it to development
ENV["RACK_ENV"] = "development" if ENV["RACK_ENV"].nil?

# Set the global_settings that are shared across every app
Kibana.global_settings[:port] = port || 5601
Kibana.global_settings[:host] = host || '0.0.0.0'
Kibana.global_settings[:config] = config
Kibana.global_settings[:elasticsearch] = elasticsearch
Kibana.global_settings[:root] = File.expand_path("#{HERE}/../")
Kibana.global_settings[:quiet] = options[:quiet]
Kibana.global_settings[:external_plugins_folder] = options[:plugins_folder] || nil

# Set the public folder based on whether we are running in production or not.
if ENV['RACK_ENV'] == ('production')
  Kibana.global_settings[:public_folder] = File.expand_path("#{HERE}/../public/")
  Kibana.global_settings[:bundled_plugins_folder] = File.expand_path("#{HERE}/../public/plugins")
else
  Kibana.global_settings[:public_folder] = File.expand_path("#{HERE}/../../kibana/")
  Kibana.global_settings[:bundled_plugins_folder] = File.expand_path("#{HERE}/../../kibana/plugins")
end

# Add the root of the project to the load path
$LOAD_PATH.unshift(Kibana.global_settings[:root])

require "lib/server"
Kibana::Server.run(Kibana.global_settings)
